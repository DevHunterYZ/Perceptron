from numpy import exp, array, random, dot


class NeuronLayer():
    def __init__(self, number_of_neurons, number_of_inputs_per_neuron):
        self.synaptic_weights = 2 * random.random((number_of_inputs_per_neuron, number_of_neurons)) - 1


class NeuralNetwork():
    def __init__(self, layer1, layer2):
        self.layer1 = layer1
        self.layer2 = layer2

    # S şekilli bir eğriyi açıklayan Sigmoid fonksiyonu
    # Bu fonksiyon aracılığıyla girdilerin ağırlıklı toplamını geçmek
    # 0 ile 1 arasına normalleştirin.
    def __sigmoid(self, x):
        return 1 / (1 + exp(-x))

    # Sigmoid fonksiyonunun türevi.
    # Bu Sigmoid eğrisinin gradyanıdır.
    # Mevcut ağırlıkla ilgili ne kadar güvende olduğumuzu gösterir.
    def __sigmoid_derivative(self, x):
        return x * (1 - x)

    # Sinir ağını bir deneme yanılma süreci ile eğitiyoruz.
    # Sinaptik ağırlıkların her seferinde ayarlanması.
    def train(self, training_set_inputs, training_set_outputs, number_of_training_iterations):
        for iteration in range(number_of_training_iterations):
            # Eğitim setini sinir ağımızdan geçirin
            output_from_layer_1, output_from_layer_2 = self.think(training_set_inputs)

            # Katman 2 için hatayı hesaplayın (İstenen çıktı arasındaki fark).
            # ve öngörülen çıktı).
            layer2_error = training_set_outputs - output_from_layer_2
            layer2_delta = layer2_error * self.__sigmoid_derivative(output_from_layer_2)

            # 1. katman için hatayı hesapla (1. katmandaki ağırlıklara bakarak,
            # Katman 2'deki hataya 1 katmanın ne kadar katkıda bulunduğunu belirleyebiliriz.
            layer1_error = layer2_delta.dot(self.layer2.synaptic_weights.T)
            layer1_delta = layer1_error * self.__sigmoid_derivative(output_from_layer_1)

            # Ağırlıkları ne kadar ayarlayacağınızı hesaplayın.
            layer1_adjustment = training_set_inputs.T.dot(layer1_delta)
            layer2_adjustment = output_from_layer_1.T.dot(layer2_delta)

            # Ağırlıkları ayarlayın.
            self.layer1.synaptic_weights += layer1_adjustment
            self.layer2.synaptic_weights += layer2_adjustment

    # Sinir ağı düşünüyor.
    def think(self, inputs):
        output_from_layer1 = self.__sigmoid(dot(inputs, self.layer1.synaptic_weights))
        output_from_layer2 = self.__sigmoid(dot(output_from_layer1, self.layer2.synaptic_weights))
        return output_from_layer1, output_from_layer2

    # Sinir ağı ağırlığını yazdırır.
    def print_weights(self):
        print ("    Layer 1 (4 neurons, each with 3 inputs): ")
        print (self.layer1.synaptic_weights)
        print ("    Layer 2 (1 neuron, with 4 inputs):")
        print (self.layer2.synaptic_weights)

if __name__ == "__main__":

    # Rastgele sayı üretecini tohumla.
    random.seed(1)

    # 1. katmanı oluştur (her biri 3 girişli 4 nöron)
    layer1 = NeuronLayer(4, 3)

    # Katman 2'yi oluştur (4 girişli tek bir nöron)
    layer2 = NeuronLayer(1, 4)

    # Bir sinir ağı oluşturmak için katmanları birleştirin.
    neural_network = NeuralNetwork(layer1, layer2)

    print ("Aşama 1) Rastgele başlangıç sinaptik ağırlıkları: ")
    neural_network.print_weights()

    # Eğitim seti. Her biri 3 giriş değerinden oluşan 7 örnek var
    # ve 1 çıkış değeri.
    training_set_inputs = array([[0, 0, 1], [0, 1, 1], [1, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1], [0, 0, 0]])
    training_set_outputs = array([[0, 1, 1, 1, 1, 0, 0]]).T

    # Eğitim setini kullanarak sinir ağını eğitin.
    # 60.000 kez yapın ve her seferinde küçük ayarlamalar yapın.
    neural_network.train(training_set_inputs, training_set_outputs, 60000)

    print ("Aşama 2) Eğitimden sonra yeni sinaptik ağırlıklar: ")
    neural_network.print_weights()

    # Nöral ağı yeni bir durumla test edin.
    print ("Aşama 3) Yeni bir durum düşünüldüğünde [1, 1, 0] -> ?: ")
    hidden_state, output = neural_network.think(array([1, 1, 0]))
    print (output)
